package incoming

import (
	"com.canseverayberk/pg-dml-replay/protocol"
	"com.canseverayberk/pg-dml-replay/test"
	"encoding/hex"
	"testing"
)

func TestDecodeDataRowMessage(t *testing.T) {
	// given
	var dataRowMessage DataRowMessage
	//dataRowMessageHex := "44000000a2000f00000007323838303432380000001a323032312d30352d30362032333a35393a34352e3437323137310000000331303000000016476c632dc59e6f6b2d53656c6c657253746f72652d33000000054f524d2d3200000013c59e6f6b205472656e64796f6c7465737431320000000747524f434552590000000133ffffffff000000013000000001310000000130000000013000000001300000000130"
	dataRowMessageHex := "44000003d6002a0000000532383732360000001a323032312d30342d30352031323a35373a32392e3537353335390000001a323032312d30342d30352031333a30303a30302e313335393437000000022d310000000c554e41535349474e41424c45ffffffff000000033131320000003d59c4b16c64c4b17a2043616464657369204b65c59fc59f61662020536f6b616b202d20416262617361c49f61204d6168616c6c657369204d6967726f73ffffffffffffffff000000063135302e3030ffffffffffffffff0000000532383732360000000938383938363132333100000013323032312d30342d30352031323a35363a32390000000132ffffffff0000001055415420476c632d4d61726b65742d310000002434303363636334342d316563302d343539382d383433392d3763373864376633353666310000000d37333730323639323237333337000000013100000013323032312d30342d30352031323a33303a3030ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000001a323032312d30342d30352031323a35373a32392e353731323734ffffffffffffffff000001e17b226964223a203131322c20226e616d65223a202255415420476c632d4d61726b65742d31222c20227a6f6e654964223a20322c202261646472657373223a202259c4b16c64c4b17a2043616464657369204b65c59fc59f61662020536f6b616b202d20416262617361c49f61204d6168616c6c657369204d6967726f73222c20226c6f636174696f6e223a207b2274797065223a2022506f696e74222c2022636f6f7264696e61746573223a205b32392e3135373635323836383038303132342c2034302e39383533363733343430383439345d7d2c20227a6f6e654e616d65223a202249535420416e61646f6c75222c20227375625a6f6e654964223a2031342c2030352031333a30303a30302e313335393437000000022d310000000c554e41535349474e41424c45ffffffff0000000239350000003c59c4b16c64c4b17a2043616464657369204b65c59fc59f616620536f6b616b202d20416262617361c49f61204d6168616c6c657369204d6967726f73ffffffffffffffff0000000535302e3030ffffffffffffffff0000000532383732300000000938393630343137343600000013323032312d30342d30352031323a35363a31360000000131ffffffff0000001c55415420476c632d4d6967726f732d53656c6c657253746f72652d310000002431366363626365342d343863632d346232652d626332662d3535323261656561653637370000000d37333730323639323237303039000000013100000013323032"
	dataRowMessageDecoded, _ := hex.DecodeString(dataRowMessageHex)

	// when
	DecodeDataRowMessage(dataRowMessageDecoded, &dataRowMessage)
	// todo: assert column values
	dataRowMessage.ColumnValues = nil

	// then
	expectedDataRowMessage := DataRowMessage{
		Type:          protocol.DataRow,
		Length:        int32(162),
		ColumnCount:   15,
		ColumnLengths: []int32{7, 26, 3, 22, 5, 19, 7, 1, -1, 1, 1, 1, 1, 1, 1},
	}
	test.AssertEquals(t, expectedDataRowMessage, dataRowMessage)
}

/*
func TestDecodeDataRowMessageFromIntArray(t *testing.T) {
	var array = []int{68,0,0,3,214,0,42,0,0,0,5,50,56,55,50,54,0,0,0,26,50,48,50,49,45,48,52,45,48,53,32,49,50,58,53,55,58,50,57,46,53,55,53,51,53,57,0,0,0,26,50,48,50,49,45,48,52,45,48,53,32,49,51,58,48,48,58,48,48,46,49,51,53,57,52,55,0,0,0,2,45,49,0,0,0,12,85,78,65,83,83,73,71,78,65,66,76,69,255,255,255,255,0,0,0,3,49,49,50,0,0,0,61,89,196,177,108,100,196,177,122,32,67,97,100,100,101,115,105,32,75,101,197,159,197,159,97,102,32,32,83,111,107,97,107,32,45,32,65,98,98,97,115,97,196,159,97,32,77,97,104,97,108,108,101,115,105,32,77,105,103,114,111,115,255,255,255,255,255,255,255,255,0,0,0,6,49,53,48,46,48,48,255,255,255,255,255,255,255,255,0,0,0,5,50,56,55,50,54,0,0,0,9,56,56,57,56,54,49,50,51,49,0,0,0,19,50,48,50,49,45,48,52,45,48,53,32,49,50,58,53,54,58,50,57,0,0,0,1,50,255,255,255,255,0,0,0,16,85,65,84,32,71,108,99,45,77,97,114,107,101,116,45,49,0,0,0,36,52,48,51,99,99,99,52,52,45,49,101,99,48,45,52,53,57,56,45,56,52,51,57,45,55,99,55,56,100,55,102,51,53,54,102,49,0,0,0,13,55,51,55,48,50,54,57,50,50,55,51,51,55,0,0,0,1,49,0,0,0,19,50,48,50,49,45,48,52,45,48,53,32,49,50,58,51,48,58,48,48,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,26,50,48,50,49,45,48,52,45,48,53,32,49,50,58,53,55,58,50,57,46,53,55,49,50,55,52,255,255,255,255,255,255,255,255,0,0,1,225,123,34,105,100,34,58,32,49,49,50,44,32,34,110,97,109,101,34,58,32,34,85,65,84,32,71,108,99,45,77,97,114,107,101,116,45,49,34,44,32,34,122,111,110,101,73,100,34,58,32,50,44,32,34,97,100,100,114,101,115,115,34,58,32,34,89,196,177,108,100,196,177,122,32,67,97,100,100,101,115,105,32,75,101,197,159,197,159,97,102,32,32,83,111,107,97,107,32,45,32,65,98,98,97,115,97,196,159,97,32,77,97,104,97,108,108,101,115,105,32,77,105,103,114,111,115,34,44,32,34,108,111,99,97,116,105,111,110,34,58,32,123,34,116,121,112,101,34,58,32,34,80,111,105,110,116,34,44,32,34,99,111,111,114,100,105,110,97,116,101,115,34,58,32,91,50,57,46,49,53,55,54,53,50,56,54,56,48,56,48,49,50,52,44,32,52,48,46,57,56,53,51,54,55,51,52,52,48,56,52,57,52,93,125,44,32,34,122,111,110,101,78,97,109,101,34,58,32,34,73,83,84,32,65,110,97,100,111,108,117,34,44,32,34,115,117,98,90,111,110,101,73,100,34,58,32,49,52,44,32,48,53,32,49,51,58,48,48,58,48,48,46,49,51,53,57,52,55,0,0,0,2,45,49,0,0,0,12,85,78,65,83,83,73,71,78,65,66,76,69,255,255,255,255,0,0,0,2,57,53,0,0,0,60,89,196,177,108,100,196,177,122,32,67,97,100,100,101,115,105,32,75,101,197,159,197,159,97,102,32,83,111,107,97,107,32,45,32,65,98,98,97,115,97,196,159,97,32,77,97,104,97,108,108,101,115,105,32,77,105,103,114,111,115,255,255,255,255,255,255,255,255,0,0,0,5,53,48,46,48,48,255,255,255,255,255,255,255,255,0,0,0,5,50,56,55,50,48,0,0,0,9,56,57,54,48,52,49,55,52,54,0,0,0,19,50,48,50,49,45,48,52,45,48,53,32,49,50,58,53,54,58,49,54,0,0,0,1,49,255,255,255,255,0,0,0,28,85,65,84,32,71,108,99,45,77,105,103,114,111,115,45,83,101,108,108,101,114,83,116,111,114,101,45,49,0,0,0,36,49,54,99,99,98,99,101,52,45,52,56,99,99,45,52,98,50,101,45,98,99,50,102,45,53,53,50,50,97,101,101,97,101,54,55,55,0,0,0,13,55,51,55,48,50,54,57,50,50,55,48,48,57,0,0,0,1,49,0,0,0,19,50,48,50}
	for _, val := range array {
		fmt.Print(fmt.Sprintf("%02x", val))
	}
}*/
