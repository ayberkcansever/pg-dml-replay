package incoming

import (
	"com.canseverayberk/pg-dml-replay/protocol"
	"com.canseverayberk/pg-dml-replay/test"
	"encoding/hex"
	"testing"
)

func TestDecodeDataRowMessage(t *testing.T) {
	// given
	var dataRowMessage DataRowMessage
	dataRowMessageHex := "44000000a2000f00000007323838303432380000001a323032312d30352d30362032333a35393a34352e3437323137310000000331303000000016476c632dc59e6f6b2d53656c6c657253746f72652d33000000054f524d2d3200000013c59e6f6b205472656e64796f6c7465737431320000000747524f434552590000000133ffffffff000000013000000001310000000130000000013000000001300000000130"
	//dataRowMessageHex := "4400000385002a0000000532383635330000001a323032312d30342d30352030363a35393a31302e3336363935380000001a323032312d30342d30352030373a30303a30302e313232323738000000022d310000000c554e41535349474e41424c45ffffffff0000000c31323334353637373839393900000014454c4d41204d41482041524d555420534f4b414bffffffffffffffff000000063530302e3030ffffffffffffffff0000000532383635330000000938323738333830323900000013323032312d30342d30352030363a35393a30360000000132ffffffff00000016554154204b6164696bc3b67979794d6967726f7373730000002438326163356666372d626262652d343338302d383338332d3064313231383431633635630000000d37333730323639323231323132000000013100000013323032312d30342d30352030363a33303a3030ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000019323032312d30342d30352030363a35393a31302e3336353236ffffffffffffffff000001ac7b226964223a203132333435363737383939392c20226e616d65223a2022554154204b6164696bc3b67979794d6967726f737373222c20227a6f6e654964223a20322c202261646472657373223a2022454c4d41204d41482041524d555420534f4b414b222c20226c6f636174696f6e223a5420476c632d4d6967726f732d53656c6c657253746f72652d340000002439343530343338632d643961322d343838612d386536322d3765326664666564346339640000000d37333730323639343137313732000000013100000013323032312d30342d31392031373a33303a3030ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000001a323032312d30342d31392031373a35373a30312e333933313735ffffffffffffffff0000021d7b226964223a203130342c20226e616d65223a202255415420476c632d4d6967726f732d53656c6c657253746f72652d34222c20227a6f6e654964223a20322c202261646472657373223a20224b65c59fc59f616620536f6b616b202d20c59e69c59f6c69204d6168616c6c657369204d6967726f73222c20226c6f636174696f6e223a207b2274797065223a2022506f696e74222c2022636f6f7264696e61746573223a205b32392e3133373231393739393830343637322c2034302e39383532343338333439343038395d"
	dataRowMessageDecoded, _ := hex.DecodeString(dataRowMessageHex)

	// when
	DecodeDataRowMessage(dataRowMessageDecoded, &dataRowMessage)
	// todo: assert column values
	dataRowMessage.ColumnValues = nil

	// then
	expectedDataRowMessage := DataRowMessage{
		Type:          protocol.DataRow,
		Length:        int32(162),
		ColumnCount:   15,
		ColumnLengths: []int32{7, 26, 3, 22, 5, 19, 7, 1, -1, 1, 1, 1, 1, 1, 1},
	}
	test.AssertEquals(t, expectedDataRowMessage, dataRowMessage)
}

/*
func TestDecodeDataRowMessageFromIntArray(t *testing.T) {
	var array = []int{68,0,0,3,133,0,42,0,0,0,5,50,56,54,53,51,0,0,0,26,50,48,50,49,45,48,52,45,48,53,32,48,54,58,53,57,58,49,48,46,51,54,54,57,53,56,0,0,0,26,50,48,50,49,45,48,52,45,48,53,32,48,55,58,48,48,58,48,48,46,49,50,50,50,55,56,0,0,0,2,45,49,0,0,0,12,85,78,65,83,83,73,71,78,65,66,76,69,255,255,255,255,0,0,0,12,49,50,51,52,53,54,55,55,56,57,57,57,0,0,0,20,69,76,77,65,32,77,65,72,32,65,82,77,85,84,32,83,79,75,65,75,255,255,255,255,255,255,255,255,0,0,0,6,53,48,48,46,48,48,255,255,255,255,255,255,255,255,0,0,0,5,50,56,54,53,51,0,0,0,9,56,50,55,56,51,56,48,50,57,0,0,0,19,50,48,50,49,45,48,52,45,48,53,32,48,54,58,53,57,58,48,54,0,0,0,1,50,255,255,255,255,0,0,0,22,85,65,84,32,75,97,100,105,107,195,182,121,121,121,77,105,103,114,111,115,115,115,0,0,0,36,56,50,97,99,53,102,102,55,45,98,98,98,101,45,52,51,56,48,45,56,51,56,51,45,48,100,49,50,49,56,52,49,99,54,53,99,0,0,0,13,55,51,55,48,50,54,57,50,50,49,50,49,50,0,0,0,1,49,0,0,0,19,50,48,50,49,45,48,52,45,48,53,32,48,54,58,51,48,58,48,48,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,25,50,48,50,49,45,48,52,45,48,53,32,48,54,58,53,57,58,49,48,46,51,54,53,50,54,255,255,255,255,255,255,255,255,0,0,1,172,123,34,105,100,34,58,32,49,50,51,52,53,54,55,55,56,57,57,57,44,32,34,110,97,109,101,34,58,32,34,85,65,84,32,75,97,100,105,107,195,182,121,121,121,77,105,103,114,111,115,115,115,34,44,32,34,122,111,110,101,73,100,34,58,32,50,44,32,34,97,100,100,114,101,115,115,34,58,32,34,69,76,77,65,32,77,65,72,32,65,82,77,85,84,32,83,79,75,65,75,34,44,32,34,108,111,99,97,116,105,111,110,34,58,84,32,71,108,99,45,77,105,103,114,111,115,45,83,101,108,108,101,114,83,116,111,114,101,45,52,0,0,0,36,57,52,53,48,52,51,56,99,45,100,57,97,50,45,52,56,56,97,45,56,101,54,50,45,55,101,50,102,100,102,101,100,52,99,57,100,0,0,0,13,55,51,55,48,50,54,57,52,49,55,49,55,50,0,0,0,1,49,0,0,0,19,50,48,50,49,45,48,52,45,49,57,32,49,55,58,51,48,58,48,48,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,26,50,48,50,49,45,48,52,45,49,57,32,49,55,58,53,55,58,48,49,46,51,57,51,49,55,53,255,255,255,255,255,255,255,255,0,0,2,29,123,34,105,100,34,58,32,49,48,52,44,32,34,110,97,109,101,34,58,32,34,85,65,84,32,71,108,99,45,77,105,103,114,111,115,45,83,101,108,108,101,114,83,116,111,114,101,45,52,34,44,32,34,122,111,110,101,73,100,34,58,32,50,44,32,34,97,100,100,114,101,115,115,34,58,32,34,75,101,197,159,197,159,97,102,32,83,111,107,97,107,32,45,32,197,158,105,197,159,108,105,32,77,97,104,97,108,108,101,115,105,32,77,105,103,114,111,115,34,44,32,34,108,111,99,97,116,105,111,110,34,58,32,123,34,116,121,112,101,34,58,32,34,80,111,105,110,116,34,44,32,34,99,111,111,114,100,105,110,97,116,101,115,34,58,32,91,50,57,46,49,51,55,50,49,57,55,57,57,56,48,52,54,55,50,44,32,52,48,46,57,56,53,50,52,51,56,51,52,57,52,48,56,57,93}
	for _, val := range array {
		fmt.Print(fmt.Sprintf("%02x", val))
	}
}*/
